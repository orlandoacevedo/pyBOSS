from PyBOSS.get_pars import read_config_file
from PyBOSS.init_pars import init_pars
from PyBOSS.utils import read_ff_file, read_oplsaa_file, read_zmat
from PyBOSS.init_solutes import InitSolutes
from PyBOSS.init_solvents import InitSolvents
from PyBOSS.interactions import Interactions

from PyBOSS.Tests.utils import allclose
from PyBOSS.Tests import *

import unittest


class Test_init_solvents(unittest.TestCase):
    innerpars = read_config_file(FILE_CONFIG_TXT)
    innerpars = init_pars(innerpars)
    bond_pars, dihedral_pars = read_ff_file(FILE_PAR,msg=False)
    oplsaa_bond_pars, oplsaa_angle_pars = read_oplsaa_file(FILE_OPLS_PAR,msg=False)
    solutezmat = read_zmat(FILE_ZMAT)
    myinitsolute = InitSolutes(
        bond_pars=bond_pars, dihedral_pars=dihedral_pars,
        oplsaa_bond_pars=oplsaa_bond_pars, oplsaa_angle_pars=oplsaa_angle_pars,
        solutezmat=solutezmat, **innerpars
    )
    myinitsolute.run()
    myinitsolute.set_pert_charges(CHARGES,fullpars=False)
    solutesdata = myinitsolute.solutesdata
    del myinitsolute
    tol = 0.000001

    def test_initsolvents(self):
        cls = InitSolvents(
            mymovetype=1, myicut=2,
            waterboxfile=FILE_WATERBOX, bond_pars=self.bond_pars,
            solutezmat=self.solutezmat,
            solutesdata=self.solutesdata, **self.innerpars
        )
        cls.buildup()
        calcndx = cls.boss_type_filter()
        reflist = [
            153,  216,  215,  214,  213,  212,  211,  210,  209,  208, 207,
            206,  205,  204,  203,  202,  201,  199,  198,  197,  196,  195,
            194,  193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
            183,  182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
            172,  171,  170,  169,  168,  167,  166,  164,  163,  162,  161,
            160,  159,  158,  157,  156,  155,  154,  152,  151,  150,  149,
            148,  147,  146,  145,  143,  142,  141,  140,  139,  138,  137,
            136,  135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
            125,  124,  122,  121,  120,  118,  117,  116,  115,  114,  113,
            112,  111,  110,  109,  108,  107,  106,  105,  104,  103,  102,
            101,  100,  99,  98,  97,  96,  95,  94,  93,  91,  90,  89,  88,
            87,  86,  84,  83,  82,  81,  80,  79,  78, 76,  75,  74,  73,  72,
            70,  68,  66,  62,  61,  60,  59,  58,  57,  56,  54,  53,  52,  51,
            50,  49,  48,  47,  46,  45,  44,  43,  42,  41,  40,  39,  38,  36,
            35,  34,  33,  32,  31,  30,  29,  28,  27,  26,  25,  24,  23,  22,
            21,  19,  17,  16,  15,  14,  13,  12,  11,  10,  9,  7,  6,  5,  4,
            2,  1,  8,  92,  165,  144,  67,  55,  71,  18,  77,  119,  63,
            123,  37,  69,  64,  85,  3,  20,  200,  65
        ]
        ANCHOR_TEST_BUILDUP = True
        self.assertTrue(allclose([i+1 for i in calcndx], reflist))


        wxyz_beg = [
            1.74494476,  -7.59537418,  7.99171941,  2.6925113,  -6.50280561,  1.51180593,
            -0.76559176,  -0.02321567,  -4.30652081,  0.07773808,  1.67385319,  -8.14460255,
            7.86495294,  2.16291519,  -6.5576116,  1.41732374,  0.15824698,  0.83762351,
            -5.22908932,  -0.46107103,  1.53301244,  -6.91780855,  8.12312728,  2.66875486,
            -6.71472547,  0.65168947,  -1.15656838,  0.02953573,  -4.15311407,  0.93535904,
            1.70871429,  -7.57894546,  7.99231356,  2.6216755,  -6.53694974,  1.38960579,
            -0.69737898,  0.09373494,  -4.4049828,  0.11854984,  -2.7381352,  7.14170689,
            -8.30245396,  -9.3390572,  -1.19754162,  -1.97869457,  -4.14015494,  -4.30167604,
            -3.40564703,  -7.13756616,  -1.9380766,  6.56176405,  -7.64002914,  -9.75291142,
            -1.8598518,  -2.8730895,  -4.01105406,  -4.39487721,  -3.17559647,  -6.39291778,
            -2.46351487,  6.56910792,  -9.11870795,  -9.95690779,  -0.3747117,  -1.58122942,
            -4.46823771,  -4.83169616,  -3.33700293,  -6.75730043,  -2.60056334,  6.99416763,
            -8.32214595,  -9.47112786,  -1.17699316,  -2.04230758,  -4.16562702,  -4.38145588,
            -3.36741051,  -6.99356358,  4.06960433,  0.06793551,  -5.33543339,  -9.27486634,
            1.37613072,  -7.75764443,  -9.20191428,  -0.45935178,  -4.06795228,  -2.93872369,
            3.54894758,  -0.45955464,  -4.65620207,  -8.59333552,  2.06502324,  -7.42998299,
            -9.41659149,  -0.86739663,  -4.17829473,  -3.20595964,  4.9617364,  0.42747215,
            -4.85305084,  -10.00557004,  1.816894,  -7.6218045,  -10.01168608,  0.33596393,
            -3.12562231,  -2.74868212,  4.11715765,  0.04643544,  -5.1867328,  -9.28116106,
            1.52074029,  -7.69831067,  -9.33305611,  -0.40977644,  -3.96144784, -2.9486055
        ]
        cxyz_beg = []
        for k in range(3):
            cxyz_beg.extend([cls.waterbox['xyz'][i][j][k] for j in range(4) for i in range(10)])
        self.assertTrue(allclose(cxyz_beg, wxyz_beg, self.tol))


        wxyz_end = [
            1.74494476, -7.59537418, 7.99171941, 2.6925113, -6.50280561, 1.51180593, -0.76559176,
            -0.02321567, -4.30652081, 0.07773808, 1.67385319, -8.14460255, 7.86495294, 2.16291519,
            -6.5576116, 1.41732374, 0.17940824, 0.83762351, -5.22908932, 1.02273808, 1.53301244,
            -6.91780855, 8.12312728, 2.66875486, -6.71472547, 0.65168947, -1.21933742, 0.02953573,
            -4.15311407, -0.37600758, 1.70871429, -7.57894546, 7.99231356, 2.6216755, -6.53694974,
            1.38960579, -0.69737898, 0.09373494, -4.4049828, 0.11854984, -2.7381352, 7.14170689,
            -8.30245396, -9.3390572, -1.19754162, -1.97869457, -4.14015494, -4.30167604,
            -3.40564703, -7.13756616, -1.9380766, 6.56176405, -7.64002914, -9.75291142, -1.8598518,
            -2.8730895, -4.14015494, -4.39487721, -3.17559647, -7.13756616, -2.46351487, 6.56910792,
            -9.11870795, -9.95690779, -0.3747117, -1.58122942, -5.496257770000001, -4.83169616,
            -3.33700293, -8.49366899, -2.60056334, 6.99416763, -8.32214595, -9.47112786, -1.17699316,
            -2.04230758, -4.16562702, -4.38145588, -3.36741051, -6.99356358, 4.06960433, 0.06793551,
            -5.33543339, -9.27486634, 1.37613072, -7.75764443, -9.20191428, -0.45935178, -4.06795228,
            -2.93872369, 3.54894758, -0.45955464, -4.65620207, -8.59333552, 2.06502324, -7.42998299,
            -9.20191428, -0.86739663, -4.17829473, -2.93872369, 4.9617364, 0.42747215, -4.85305084,
            -10.00557004, 1.816894, -7.6218045, -9.20191428, 0.33596393, -3.12562231, -2.93872369,
            4.11715765, 0.04643544, -5.1867328, -9.28116106, 1.52074029, -7.69831067, -9.33305611,
            -0.40977644, -3.96144784, -2.9486055
        ]
        ANCHOR_TEST_REPLACES = True
        cls.replace_solvent_atoms()
        cxyz_end = []
        for k in range(3):
            cxyz_end.extend([cls.waterbox['xyz'][i][j][k] for j in range(4) for i in range(10)])
        self.assertTrue(allclose(cxyz_end, wxyz_end, self.tol))

        wfix = [
            1.74494476, -7.59537418, 7.99171941, 2.6925113, -6.50280561, 1.51180593, -0.76559176,
            -0.02321567, -4.30652081, 0.07773808, 1.673853161025706, -8.1446026977052,
            7.864952920527117, 2.1629151246063216, -6.5576116109841704, 1.4173236997391687,
            0.17940824, 0.8376238126230883, -5.229089552664015, 1.0227380799999999,
            1.5330123734099623, -6.917808372111798, 8.123127302299746, 2.6687548571115545,
            -6.714725523972022, 0.6516892432015303, -1.21933742, 0.029535750830979472,
            -4.153114034228296, -0.37600758, 1.7087142752004842, -7.578945458483995,
            7.992313565559755, 2.6216754887330933, -6.536949745127589, 1.389605751505623,
            -0.69737898, 0.0937349879965991, -4.40498282160051, 0.11854984, -2.7381352, 7.14170689,
            -8.30245396, -9.3390572, -1.19754162, -1.97869457, -4.14015494, -4.30167604,
            -3.40564703, -7.13756616, -1.9380763212945227, 6.561763902069187, -7.6400290375572775,
            -9.752911471122468, -1.859851976491385, -2.8730898137898757, -4.14015494,
            -4.394877202152627, -3.175596415987776, -7.13756616, -2.463514783713123,
            6.569107769669765, -9.118708088517247, -9.956907865121847, -0.3747114904406236,
            -1.5812293151950207, -5.496257770000001, -4.831696369299434, -3.3370029139934254,
            -8.49366899, -2.600563284376175, 6.994167594873148, -8.322145954306743,
            -9.47112787922407, -1.1769931523972792, -2.042307603985236, -4.16562702,
            -4.381455909991454, -3.367410500844835, -6.99356358, 4.06960433, 0.06793551,
            -5.33543339, -9.27486634, 1.37613072, -7.75764443, -9.20191428, -0.45935178,
            -4.06795228, -2.93872369, 3.5489474226609996, -0.4595547800426052, -4.656201971944655,
            -8.593335435871598, 2.0650234068100555, -7.429982872824019, -9.20191428,
            -0.8673968369858839, -4.1782947924416565, -2.93872369, 4.961736680311697,
            0.4274722443928137, -4.853050758140304, -10.00557012884318, 1.816894112254156,
            -7.621804464181259, -9.20191428, 0.33596424406190295, -3.1256220902655283,
            -2.93872369, 4.117157668503024, 0.04643542853919652, -5.1867327768896505,
            -9.2811610625079, 1.5207403272727151, -7.698310642971566, -9.33305611,
            -0.409776423840823, -3.961447819484267, -2.9486055
        ]
        ANCHOR_TEST_FIX= True
        cls.fix_solvent_waterbox()
        cfix = []
        for k in range(3):
            cfix.extend([cls.waterbox['xyz'][i][j][k] for j in range(4) for i in range(10)])
        self.assertTrue(allclose(cfix, wfix, self.tol))


        expdict = {
            '0-1': [0.0, 0.0, '1', '1'],
            '0-2': [0.0, 0.0, '1', '1'],
            '0-3': [0.0, 0.0, '1', '1'],
            '0-4': [0.0, 0.0, '1', '1'],
            '0-5': [0.0, 0.0, '1', '1'],
            '0-6': [0.0, 0.0, '1', '2'],
            '0-7': [0.0, 0.0, '1', '1'],
            '0-8': [0.0, 0.0, '1', '1'],
            '0-9': [0.0, 0.0, '1', '2'],
            '1-2': [0.0, 0.0, '1', '1'],
            '1-3': [0.0, 0.0, '1', '1'],
            '1-4': [0.0, 0.0, '1', '1'],
            '1-5': [0.0, 0.0, '1', '1'],
            '1-6': [0.0, 0.0, '1', '2'],
            '1-7': [0.0, 0.0, '1', '1'],
            '1-8': [0.0, 0.0, '1', '1'],
            '1-9': [0.0, 0.0, '1', '2'],
            '2-3': [0.0, 0.0, '1', '1'],
            '2-4': [0.0, 0.0, '1', '1'],
            '2-5': [0.0, 0.0, '1', '1'],
            '2-6': [0.0, 0.0, '1', '2'],
            '2-7': [0.0, 0.0, '1', '1'],
            '2-8': [0.0, 0.0, '1', '1'],
            '2-9': [0.0, 0.0, '1', '2'],
            '3-4': [0.0, 0.0, '1', '1'],
            '3-5': [0.0, 0.0, '1', '1'],
            '3-6': [0.0, 0.0, '1', '2'],
            '3-7': [0.0, 0.0, '1', '1'],
            '3-8': [0.0, 0.0, '1', '1'],
            '3-9': [0.0, 0.0, '1', '2'],
            '4-5': [0.0, 0.0, '1', '1'],
            '4-6': [0.0, 0.0, '1', '2'],
            '4-7': [0.0, 0.0, '1', '1'],
            '4-8': [0.0, 0.0, '1', '1'],
            '4-9': [0.0, 0.0, '1', '2'],
            '5-6': [0.0, 0.0, '1', '2'],
            '5-7': [0.0, 0.0, '1', '1'],
            '5-8': [0.0, 0.0, '1', '1'],
            '5-9': [0.0, 0.0, '1', '2'],
            '6-7': [0.0, 0.0, '2', '1'],
            '6-8': [0.0, 0.0, '2', '1'],
            '6-9': [0.0, 0.0, '2', '2'],
            '7-8': [0.0, 0.0, '1', '1'],
            '7-9': [0.0, 0.0, '1', '2'],
            '8-9': [0.0, 0.0, '1', '2']
        }
        ANCHOR_TEST_INTERACTIONS = True
        cls.solventsdata.update(cls.waterbox)       # need update
        inter = Interactions(solventsdata=cls.solventsdata, **self.innerpars)
        inter.run_solvent_solvent_interactions()
        self.assertTrue(allclose(inter.energies, expdict))
        mk = inter.mymaxwik
        expwiks = [
            16.013, 88.455, 178.075, 75.28, 139.884, mk, 20.511, 66.22, mk, # 1 - 2..10
            29.196, 87.288, 72.448, 61.24, mk, 57.616, 17.106, mk,          # 2 - 3..10
            15.519, 45.045, 47.856, mk, 23.776, 42.606, mk,     # 3 - 4..10
            113.444, 57.871, mk, 77.713, 27.112, mk,            # 4 - 5..10
            83.426, mk, 45.354, 29.638, mk,     # 5 - 6..10
            11.944, 53.265, 13.614, mk,         # 6 - 7..10
            mk, mk, mk,         # 7 - 8..10
            13.022, 14.2,       # 8 - 9..10
            mk                  # 9 - 10
        ]
        self.assertTrue(allclose(inter.wiks, expwiks, 0.002))

        inter = Interactions(
            solventsdata=cls.solventsdata,
            solutezmat=self.solutezmat, solutesdata=self.solutesdata,
            **self.innerpars
        )
        inter.run_solute_solvent_interactions(movetype=1,icut=3)
        expwiks = [
            27.1039, 108.6983, 161.2652, 180.4908, 45.6143, 66.3818,
            102.4022, 18.7160, 46.6923, 59.5870
        ]
        self.assertTrue(allclose(inter.wiks, expwiks, 0.002))

        expwiks = [0.12, 0.088, 0.076, 0.072, 0.111, 0.102, 0.09, 0.125, 0.111, 0.105]
        inter.normlize_wiks()
        self.assertTrue(allclose(inter.wiks, expwiks, 0.002))



if __name__ == '__main__':
    unittest.main()


